{"version":3,"file":"index.umd.js","sources":["../src/index.ts"],"sourcesContent":["import { useState, useEffect } from \"react\"\nimport FontFaceObserver from \"fontfaceobserver\"\n\n/**\n * @typedef FontFace\n * @property {string} family The font-family: Roboto, Inter, Open Sans, etc\n * @property {string|number} weight The font-weight: normal, bold, 800, etc\n * @property {string} style The font-style: normal, italic, oblique\n * @property {string} stretch The font stretch: normal, condensed, expanded, etc\n */\nexport interface FontFace {\n  family: string\n  weight?:\n    | `light`\n    | `normal`\n    | `bold`\n    | `bolder`\n    | `100`\n    | `200`\n    | `300`\n    | `400`\n    | `500`\n    | `600`\n    | `700`\n    | `800`\n    | `900`\n  style?: `normal` | `italic` | `oblique`\n  stretch?:\n    | `normal`\n    | `ultra-condensed`\n    | `extra-condensed`\n    | `condensed`\n    | `semi-condensed`\n    | `semi-expanded`\n    | `expanded`\n    | `extra-expanded`\n    | `ultra-expanded`\n}\n\nexport interface Options {\n  testString?: string\n  timeout?: number\n}\n\nexport interface Config {\n  showErrors: boolean\n}\n\nfunction useFontFaceObserver(\n  fontFaces: FontFace[] = [],\n  { testString, timeout }: Options = {},\n  { showErrors }: Config = { showErrors: false }\n): boolean {\n  const [isResolved, setIsResolved] = useState(false)\n  const fontFacesString = JSON.stringify(fontFaces)\n\n  useEffect(() => {\n    const promises = JSON.parse(fontFacesString).map(\n      ({ family, weight, style, stretch }: FontFace) =>\n        new FontFaceObserver(family, {\n          weight,\n          style,\n          stretch,\n        }).load(testString, timeout)\n    )\n\n    Promise.all(promises)\n      .then(() => setIsResolved(true))\n      .catch(() => {\n        if (showErrors) {\n          // eslint-disable-next-line no-console\n          console.error(`An error occurred during font loading`)\n        }\n      })\n  }, [fontFacesString, testString, timeout, showErrors])\n\n  return isResolved\n}\n\nexport default useFontFaceObserver\n"],"names":["fontFaces","testString","timeout","showErrors","useState","isResolved","setIsResolved","fontFacesString","JSON","stringify","useEffect","promises","parse","map","FontFaceObserver","family","weight","style","stretch","load","Promise","all","then","console","error"],"mappings":"mbAgDA,SACEA,gBAAAA,IAAAA,EAAwB,qBACW,KAAjCC,IAAAA,WAAYC,IAAAA,QACZC,cAAuB,CAAEA,YAAY,MAArCA,aAEkCC,YAAS,GAAtCC,OAAYC,OACbC,EAAkBC,KAAKC,UAAUT,GAsBvC,OApBAU,YAAU,WACR,IAAMC,EAAWH,KAAKI,MAAML,GAAiBM,IAC3C,uBACMC,YADHC,OAC4B,CAC3BC,SAFOA,OAGPC,QAHeA,MAIfC,UAJsBA,UAKrBC,KAAKlB,EAAYC,KAGxBkB,QAAQC,IAAIV,GACTW,KAAK,kBAAMhB,GAAc,WACnB,WACDH,GAEFoB,QAAQC,kDAGb,CAACjB,EAAiBN,EAAYC,EAASC,IAEnCE"}